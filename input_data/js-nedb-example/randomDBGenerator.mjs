//#! /usr/bin/env node
// random generator only aiming at showcasing
// a mock example of data analysis with a .db file generated by neDB
// and an analytics processing + display with Python Dash framework
// without revealing any real API data.

import Datastore from "nedb";
// Setting up the nedb database for our random data - same as in main.mjs
const randomDB = new Datastore('./input_data/js-nedb-example/myRandomData.db');
randomDB.loadDatabase();

// ----------------------------- UTILS --------------------------------------------
// RANDOM ARRAY ELEMENT PICKING ----------------------------------------
function pickEltFromArray(myArray) {
    return myArray[getRandomInt(0, myArray.length-1)]
};
//const someReqType = chooseRequestType(requestTypes);
//console.log(someReqType);



// RANDOM DATE GENERATION WITHIN RANGE ---------------------------------
function getRandomDate(start, end) {
    const randomDate = new Date((start.getTime() + Math.random() * (end.getTime() - start.getTime())));

    // CUSTOM DATE FORMATTING -------------
    // can be adapted to suit your needs :)
    const options = { 
        hourCycle: "h23",
        weekday: "short",
        day: "numeric",
        month: "short",
        year: "numeric",
        hour: "2-digit",
        minute: "2-digit",
        second: "2-digit",
        timeZone: "GMT",
        timeZoneName: "short"
    };
    const datestr = randomDate.toLocaleString("en-GB", options);
    //datestr.replace(/^(\d{2})\/(\d{2})\/(\d{4}), (\d{2}):(\d{2})/, '$1/$2/$3 $4:$5')
    return datestr;
  };
//const someDate = getRandomDate(new Date(2012, 0, 1), new Date(2012, 0, 31));
//console.log(someDate);


// RANDOM (RELATIVE) INTEGER CHOICE WITHIN RANGE ------------------------
function getRandomInt(min, max) {
    return Math.floor(min + Math.random()*(max - min + 1))
  };
//const someInt = generateRandomInteger(-100*1000,100*1000);
//console.log(someInt);
// --------------------------- END OF UTILS ----------------------------------------

// ------------------- RANDOM DATABASE ENTRY GENERATION ----------------------------
function generateRandomDBentries(
    someDB, 
    nbOfEntries, 
    someArray, 
    someDateStart, 
    someDateEnd, 
    someIntStart,
    SomeIntEnd) 
    {
        let entryCounter = 1; //more convenient than 0 to check neDB .db file entries
        while (entryCounter <= nbOfEntries) {
            someDB.insert({
                'request_type' : pickEltFromArray(someArray),
                'some_date_field' : getRandomDate(someDateStart, someDateEnd),
                'some_qty_field' : getRandomInt(someIntStart, SomeIntEnd).toString()
            })
            entryCounter += 1
        }
        return 'random entries generated.'
    };


//RANDOM DATA --> DATASTORE - Simulated data -------------------------------------------
// For pickEltFromArray, forming the following new Array:
// GET/Dummy or POST/Login
// purposefully unbalancing in favour of GET/Dummy
// (expecting less POST/Login than GET/Dummy)
const requestTypes = new Array('POST/Login', 
'GET/Dummy', 'GET/Dummy', 'GET/Dummy', 'GET/Dummy');

//TODO: DB clearing here to avoid cumulating entries when repeating execution
//TODO: When physical clearing of the file solved =>
// Use JS/Dash integration to trigger the generator from the Dash app itself

// Below removes all entries id, but not the physical row :(
/*
randomDB.remove({}, { multi: true }, function (err, numRemoved) {
});
*/


// REMOVE  /* AND */ AROUND generateRandomDBentries + EXECUTE

generateRandomDBentries(
    randomDB,
    2000,
    requestTypes,
    new Date(2012, 0, 1),
    new Date(2012, 0, 4),
    -1000,
    1000
);